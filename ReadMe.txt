Background
•	Huffman codes are used for file compression and are part of many compressed file formats, including ZIP, JPG, PNG, and MP3 formats.
•	Huffman codes are binary codes assigned to data. Huffman codes are generated by creating a binary tree with data values at the leaves. Data values that occur more frequently will have shorter paths than those that occur less frequently.
•	The code for an individual data value is a list of ones and zeros specifying the path from the root to that data value's node. A zero indicates the left child of a node, while a one indicates the right child.
•	For this assignment, you will be compressing the files using "UDCPS" format, which is a simple, made-up image format that uses Huffman coding.
•	Each unique channel value will be assigned a code. At most, you will have codes for 256 different channel values.
•	For images with a large variety of colors or similar channel repetitions, UDCPS format is worse than PPM format. However, if a few colors occur at a significantly higher frequency than the rest, UDCPS format is smaller.
•	Technically, Huffman coding should be done in binary/raw format. However, binary encoding is tricky and is thus extra credit.
•	"UDCPS 3" format is as follows: 
1.	UDCPS
2.	whitespace (spaces, tabs, carriage return, line feed, etc.)
3.	3
4.	whitespace
5.	width
6.	whitespace
7.	height
8.	whitespace
9.	number of unique channel values
10.	end of line
11.	For each unique channel value, 
a.	string code
b.	whitespace
c.	red channel as an ASCII number
d.	whitespace
e.	green channel as an ASCII number
f.	whitespace
g.	blue channel as an ASCII number
h.	end of line
12.	For each pixel in the image, left to right, top to bottom, the ASCII ones and zeros code representing the pixel.
•	The extra credit "UDCPS 4" format is as follows: 
1.	UDCPS
2.	whitespace
3.	4
4.	whitespace
5.	width
6.	whitespace
7.	height
8.	whitespace
9.	number of unique channel values
10.	end of line
11.	For each unique channel (in a repeatable order), 
a.	a byte representing the channel
b.	a byte representing the number of bits in the code
c.	There are no separating whitespace, end of lines, or marks.
12.	For each unique channel (in the same order as before), 
?	The binary code using as many bytes as necessary.
?	If a code does not require all the bits in a byte, the next code will begin in the same byte immediately following the last bit of the previous code.
?	After all the unique codes are printed, if there are unused bits at the end of the final byte, the actual image data will begin in that byte immediately following the last bit of the last code.
13.	For each pixel in the image, left to right, top to bottom, 
?	The binary code using as many bytes as necessary.
?	If a code does not require all the bits in a byte, the next code will begin in the same byte immediately following the last bit of the previous code.
?	If the final pixel in the image does not require all the bits in the byte, the remaining bits of the final byte are ignored.
